// =====================================================================================
//
//       Filename:  proxy.cpp
//
//    Description:  implementation of proxy class
//
//        Version:  1.0
//        Created:  02/11/2015 02:54:29 AM
//       Revision:  none
//       Compiler:  g++
//
//         Author:  Chen Xie (Neil), xiec@usc.edu
//   Organization:  USC
//
// =====================================================================================
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include "proxy.h"
#include "../protocol/protocol.h"
using namespace std;

Proxy::Proxy() 
{
	memset(recvBuf, 0, sizeof recvBuf);
	memset(sendBuf, 0, sizeof sendBuf);
	sprintf(Eth0,"localhost");
	port = 0;
	numRouter = 3;
}

void Proxy::proxy_setup() {
	struct addrinfo hints, *res;
	char setupPort[5];
	int sockfd;
	int rv;

	sprintf(setupPort,"%d",port);
	memset(&hints, 0, sizeof hints);
	/*type of socket*/
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM;
	/*get socket creation information*/
	if((rv = getaddrinfo(Eth0, setupPort, &hints, &res)) == -1) {
		fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(rv));
		exit(1);
	}
	/*create socket*/
	if((rv = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) == -1) {
		perror("proxy: socket()");
		exit(1);
	}
	sockfd = rv;
	/*bind*/
	if((rv = bind(sockfd, res->ai_addr, res->ai_addrlen)) == -1) {
		close(sockfd);
		perror("proxy:bind()");
		exit(1);
	}
	freeaddrinfo(res);
}

void Proxy::proxy_routerReady() {
	/*receive packet from router*/
}
